* {
  padding: 0;
  margin: 0;
  line-height: calc(0.25rem + 1.2em + 0.25rem);
}

*,
::before,
::after {
  box-sizing: border-box;
}

*:where(:not(fieldset, progress, meter)) {
  background-repeat: no-repeat;
  background-origin: border-box;
  border-style: solid;
  border-width: 0;
}

::-moz-focus-inner {
  border-style: none;
}

:-moz-focusring {
  outline: 1px dotted ButtonText;
}

:-moz-ui-invalid {
  box-shadow: none;
}

::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

::-webkit-scrollbar {
  width: 8px;
}

html {
  -moz-tab-size: 4;
  -o-tab-size: 4;
     tab-size: 4;
  cursor: default;
  scrollbar-width: thin;
  -webkit-text-size-adjust: 100%;
  block-size: 100%;
}

body {
  min-block-size: 100%;
  text-rendering: optimizeSpeed;
  -webkit-font-smoothing: antialiased;
  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
    "Apple Color Emoji", "Segoe UI Emoji";
}

:focus-visible {
  transition: outline-offset 145ms cubic-bezier(0.25, 0, 0.4, 1);
}

:not(:active):focus-visible {
  outline-offset: 4px;
  transition-duration: 250ms;
}

:where(hr) {
  height: 0;
  color: inherit;
}

:where(abbr[title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

:where(b, strong) {
  font-weight: bolder;
}

:where(code, kbd, samp, pre) {
  font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo,
    monospace;
  font-size: 1em;
}

:where(small) {
  font-size: 80%;
}

:where(sub, sup) {
  position: relative;
  font-size: 75%;
  vertical-align: baseline;
}

:where(sub) {
  bottom: -0.25em;
}

:where(sup) {
  top: -0.5em;
}

:where(table) {
  text-indent: 0;
  border-color: inherit;
}

:where(
    a[href],
    area,
    button,
    input,
    label[for],
    select,
    summary,
    textarea,
    [tabindex]:not([tabindex*="-"])
  ) {
  touch-action: manipulation;
}

:where(input[type="file"])::-webkit-file-upload-button {
  text-align: center;
  -webkit-user-select: none;
          user-select: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}

:where(
    button,
    button[type],
    input[type="button"],
    input[type="submit"],
    input[type="reset"]
  ),
:where(input[type="file"])::-webkit-file-upload-button,
:where(input[type="file"])::file-selector-button {
  text-align: center;
  -webkit-user-select: none;
          user-select: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}

:where(input, button, textarea, select, optgroup),
:where(input[type="file"])::-webkit-file-upload-button {
  font: inherit;
  font-size: inherit;
  color: inherit;
  letter-spacing: inherit;
  word-spacing: inherit;
}

:where(button, select) {
  text-transform: none;
}

:where(button, [type="button"], [type="reset"], [type="submit"]) {
  -webkit-appearance: button;
}

:where(progress) {
  vertical-align: baseline;
}

:where([type="search"]) {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

:where(textarea) {
  resize: none;
}

:where(summary) {
  display: list-item;
}

:where(ul, ol) {
  list-style-position: inside;
}

:where(ul, ol)[role="list"] {
  list-style: none;
}

:where(a) {
  display: inline-block;
  color: inherit;
  text-decoration: none;
  background-color: transparent;
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

:where(img, svg, video, canvas, audio, iframe, embed, object) {
  display: block;
}

:where(img, svg, video) {
  block-size: auto;
  max-inline-size: 100%;
}

@media (inverted-colors: inverted) {
  :where(img, svg, video) {
    filter: invert(100%);
  }
}

:where(img) {
  width: 100%;
  height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center;
     object-position: center;
  border-style: none;
}

:where(svg) {
  fill: currentColor;
  stroke: none;
}

:where(svg):where(:not([fill])) {
  fill: none;
  stroke: currentColor;
  stroke-linecap: round;
  stroke-linejoin: round;
}

:where(svg):where(:not([width])) {
  inline-size: 5rem;
}

:where(p, h1, h2, h3, h4, h5, h6) {
  overflow-wrap: break-word;
}

:where(p) {
  -webkit-hyphens: auto;
          hyphens: auto;
  hyphenate-limit-chars: 6 3 2;
  hyphenate-limit-last: always;
}
